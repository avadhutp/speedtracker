#!/usr/bin/env python
# -*- coding: utf-8 -*-

import shlex
import subprocess
import sys

from collections import OrderedDict


CRED = '\033[91m'
CGREEN = '\33[32m'
CEND = '\033[0m'

ENCRYPTION_KEY_PROP = 'encryptionKey'

URL_ENCRYPT = 'https://api.speedtracker.org/encrypt/{key}/{payload}'
WGET_CMD = 'wget --no-verbose --timeout 5 -O - {url}'
SED_CMD = 'sed -E -i.bak \'/{prop}: (.*)/s/"(.*)"/"{value}"/\' speedtracker.yml'


USER_ENCRYPTION_KEY = ''


def version_check():
	if sys.version_info < (2, 7):
		raise Exception('Must use python 2.7 or greater')


def run_cmd(cmd):
	p = subprocess.Popen(
			shlex.split(cmd),
			stdout=subprocess.PIPE,
			stderr=subprocess.PIPE,
		)

	out, err = p.communicate()
	
	if p.returncode == 0:
		return out

	raise Exception('Failed making a call to {cmd}: {err}'.format(
		cmd=cmd,
		err=err,
	))


def success(msg):
	print CGREEN + '[success] ' + msg + CEND


def replace_in_speedtracker_yaml(prop, value):
	run_cmd(SED_CMD.format(
		prop=prop,
		value=value,
	))

	run_cmd('rm speedtracker.yml.bak')


def make_call(url):
	cmd = WGET_CMD.format(url=url)

	return run_cmd(cmd)


def get_input(msg, is_mandatory=True):
	msg += ': ' if (is_mandatory) else ' (press â†µ to skip this): '
	val = ''

	attempt = 0
	while attempt == 0 or (is_mandatory and val == ''):
		val = raw_input(msg)
		attempt += 1

	return val


def setup_encryption_key():
	key = get_input('Enter your encryption key')

	url = URL_ENCRYPT.format(key=key, payload='')
	encryption_key = make_call(url)
	replace_in_speedtracker_yaml(ENCRYPTION_KEY_PROP, encryption_key)

	global USER_ENCRYPTION_KEY
	USER_ENCRYPTION_KEY = key

	success('{prop} updated in speedtracker.yml'.format(prop=ENCRYPTION_KEY_PROP))


def setup_other_speedtracker_props():
	cfg = OrderedDict([
		('wptKey', {
			'name': 'WebPageTest API key',
			'is_mandatory': True,
		}),
		('wptUrl', {
			'name': 'WebPageTest server',
			'is_mandatory': False,
		}),
	])

	for prop, attributes in cfg.items():
		val = get_input(
			'Enter {name}: '.format(
				name=attributes['name'],
			),
			attributes['is_mandatory'],
		)

		if val != '':
			url = URL_ENCRYPT.format(key=USER_ENCRYPTION_KEY, payload=val)
			encrypted_val = make_call(url)
			replace_in_speedtracker_yaml(prop, encrypted_val)

			success('{prop} updated in speedtracker.yml'. format(prop=prop))


def main():
	print '----Speedtracker setup----'
	try:
		version_check()
		setup_encryption_key()
		setup_other_speedtracker_props()
	except Exception as e:
		print CRED + '[error] {err}'.format(err=str(e)) + CEND


if __name__ == '__main__':
	main()